{"version":3,"sources":["/Users/lixianjie/project/openSource/hooks/src/state/useSame/useSame.ts"],"sourcesContent":["import { useEffect, useMemo, useRef } from \"react\";\nimport { createRandString, isArray } from \"@m78/utils\";\nimport { createEvent, useUpdateEffect, useUpdate } from \"@m78/hooks\";\n\n/** 单个组件实例 */\nexport interface SameItem<Meta = any> {\n  /** 该组件的唯一key */\n  id: string;\n  /** 该组件的递增值, 用于排序, 组件挂载得越早, 值越小 */\n  sort: number;\n  /** 该组件需要共享给其他组件的元信息 */\n  meta: Meta;\n  /** 是否启用 */\n  enable: boolean;\n}\n\ninterface Same {\n  [key: string]: Array<SameItem>;\n}\n\ntype Returns<Meta> = readonly [number, Array<SameItem<Meta>>, string];\n\n/** 所有共享数据 */\nconst sameMap: Same = {};\n\n/** 所有事件对象 */\nconst events: {\n  [key: string]: ReturnType<typeof createEvent>;\n} = {};\n\nconst defaultConfig = {\n  deps: [],\n  enable: true,\n  updateDisabled: false,\n};\n\n/** 递增值, 用于存储组件第一次挂载的时间点 */\nlet increment = 0;\n\n/** 以指定key获取事件对象，不存在时创建并返回 */\nfunction getEvent(key: string) {\n  const e = events[key];\n  if (e) return e;\n  events[key] = createEvent();\n  return events[key];\n}\n\n// 通过list来生成状态, 组件一直保持list为最新状态\n\n/**\n * 用于对同组件的不同实例进行管理，获取其他已渲染组件的共享数据以及当前处在启用实例中的顺序\n *\n * `常见用例有`:\n * - 获取Modal等组件的实例关系，根据组件渲染顺序设置zIndex，隐藏多余的mask等\n * - 对于Drawer等组件，根据渲染顺序调整显示的层级\n * @param key - 标识该组件的唯一key\n * @param config - 额外配置\n * @param config.meta - 用于共享的组件源数据，可以在同组件的其他实例中获取到\n * @param config.deps - [] | 出于性能考虑, 只有index和instances变更才会通知其他组件更新, meta是不会通知的, 可以通过配置此项使deps任意一项变更后都通知其他组件\n * @param config.enable - true | 只有在enable的值为true时，该实例才算启用并被钩子接受, 通常为Modal等组件的toggle参数 * @return state - 同类型启用组件共享的状态\n * @param config.updateDisabled - false | 发生变更时, 是否通知enable为false的组件更新\n * @return state[0] index - 该组件实例处于所有实例中的第几位，未启用的组件返回-1\n * @return state[1] instances - 所有启用状态的组件<Item>组成的数组，正序\n * @return state[2] id - 该组件实例的唯一标识\n * */\nexport function useSame<Meta = any>(\n  key: string,\n  config?: {\n    meta?: Meta;\n    deps?: any[];\n    enable?: boolean;\n    updateDisabled?: boolean;\n  }\n): Returns<Meta> {\n  const conf = {\n    ...defaultConfig,\n    ...config,\n  };\n\n  const id = useMemo(() => createRandString(2), []);\n  const sort = useMemo(() => ++increment, []);\n  /** 最后一次返回的信息, 用于对比验证是否需要更新 */\n  const lastReturn = useRef<Returns<Meta> | undefined>();\n\n  /* 在某个组件更新了sameMap后，需要通知其他相应的以最新状态更新组件 */\n  const update = useUpdate(true);\n  const { emit, useEvent } = useMemo(\n    () => getEvent(`${key}_same_custom_event`),\n    []\n  );\n\n  useMemo(() => {\n    // 创建item\n    const item: SameItem = {\n      id,\n      sort,\n      meta: conf.meta || {},\n      enable: conf.enable,\n    };\n\n    const [current] = getCurrent();\n\n    current.push(item);\n\n    current.sort((a, b) => a.sort - b.sort);\n  }, []);\n\n  // 将最新状态实时设置到当前的item上\n  useMemo(() => {\n    setCurrentState(conf.enable, conf.meta);\n  }, [conf.meta, conf.enable]);\n\n  // cIndex变更时，通知其他钩子进行更新\n  useUpdateEffect(() => emit(id, true), [...conf.deps]);\n\n  // enable变更时通知更新\n  useEffect(() => {\n    if (conf.enable) emit(id);\n\n    return () => {\n      const [, index] = getCurrent();\n      index !== -1 && emit(id);\n    };\n  }, [conf.enable]);\n\n  // unmount时通知其他组件并移除当前项\n  useEffect(() => {\n    return () => {\n      // 卸载时移除item\n      const [cur, index] = getCurrent();\n      if (index !== -1) {\n        const item = cur[index];\n        cur.splice(index, 1);\n        item.enable && emit(id);\n      }\n    };\n  }, []);\n\n  /** 获取过滤掉非enable项的所有item, 当前index和id */\n  function get() {\n    const [current] = getCurrent();\n\n    const filter = current.filter((item) => item.enable);\n    const index = filter.findIndex((item) => item.id === id);\n\n    return [index, filter, id] as const;\n  }\n\n  /** 获取当前组件在sameMap中的实例组和该组件在实例中的索引并确保sameMap[key]存在 */\n  function getCurrent() {\n    // 无实例存在时赋初始值\n    if (!isArray(sameMap[key])) {\n      sameMap[key] = [];\n    }\n\n    const index = sameMap[key].findIndex((item) => item.id === id);\n\n    return [sameMap[key], index] as const;\n  }\n\n  /** 接收组件更新通知 */\n  useEvent((_id: string, force?: boolean) => {\n    // 触发更新的实例不更新\n    if (_id === id) return;\n\n    if (!conf.updateDisabled && !conf.enable) return;\n\n    // 强制更新, 不添加额外条件, 主要目的是同步meta\n    if (force) {\n      update();\n      return;\n    }\n\n    if (!lastReturn.current) return;\n\n    const [index, current] = get();\n    const [lastIndex, lastCurrent] = lastReturn.current;\n\n    if (index !== lastIndex || current.length !== lastCurrent.length) {\n      update();\n    }\n  });\n\n  /* 设置当前实例的状态 */\n  function setCurrentState(_enable: boolean, _meta?: Meta) {\n    const [current, index] = getCurrent();\n\n    if (index !== -1) {\n      current[index].enable = _enable;\n      current[index].meta = _meta;\n    }\n  }\n\n  const returns = get();\n\n  lastReturn.current = [\n    returns[0],\n    [...returns[1]] /* 需要存储拷贝 */,\n    returns[2],\n  ];\n\n  return returns;\n}\n"],"names":["useSame","sameMap","events","defaultConfig","deps","enable","updateDisabled","increment","getEvent","key","e","createEvent","config","get","getCurrent","current","filter","item","index","findIndex","id","isArray","setCurrentState","_enable","_meta","meta","conf","useMemo","createRandString","sort","lastReturn","useRef","update","useUpdate","emit","useEvent","push","a","b","useUpdateEffect","useEffect","cur","splice","_id","force","lastIndex","lastCurrent","length","returns"],"mappings":"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"}