{"version":3,"sources":["/Users/lixianjie/project/openSource/hooks/src/state/useSame/useSame.ts"],"sourcesContent":["import { useEffect, useMemo, useRef } from \"react\";\nimport { createRandString, isArray } from \"@m78/utils\";\nimport { createEvent, useUpdateEffect, useUpdate } from \"@m78/hooks\";\n\n/** 单个组件实例 */\nexport interface SameItem<Meta = any> {\n  /** 该组件的唯一key */\n  id: string;\n  /** 该组件的递增值, 用于排序, 组件挂载得越早, 值越小 */\n  sort: number;\n  /** 该组件需要共享给其他组件的元信息 */\n  meta: Meta;\n  /** 是否启用 */\n  enable: boolean;\n}\n\ninterface Same {\n  [key: string]: Array<SameItem>;\n}\n\ntype Returns<Meta> = readonly [number, Array<SameItem<Meta>>, string];\n\n/** 所有共享数据 */\nconst sameMap: Same = {};\n\n/** 所有事件对象 */\nconst events: {\n  [key: string]: ReturnType<typeof createEvent>;\n} = {};\n\nconst defaultConfig = {\n  deps: [],\n  enable: true,\n  updateDisabled: false,\n};\n\n/** 递增值, 用于存储组件第一次挂载的时间点 */\nlet increment = 0;\n\n/** 以指定key获取事件对象，不存在时创建并返回 */\nfunction getEvent(key: string) {\n  const e = events[key];\n  if (e) return e;\n  events[key] = createEvent();\n  return events[key];\n}\n\n// 通过list来生成状态, 组件一直保持list为最新状态\n\n/**\n * 用于对同组件的不同实例进行管理，获取其他已渲染组件的共享数据以及当前处在启用实例中的顺序\n *\n * `常见用例有`:\n * - 获取Modal等组件的实例关系，根据组件渲染顺序设置zIndex，隐藏多余的mask等\n * - 对于Drawer等组件，根据渲染顺序调整显示的层级\n * @param key - 标识该组件的唯一key\n * @param config - 额外配置\n * @param config.meta - 用于共享的组件源数据，可以在同组件的其他实例中获取到\n * @param config.deps - [] | 出于性能考虑, 只有index和instances变更才会通知其他组件更新, meta是不会通知的, 可以通过配置此项使deps任意一项变更后都通知其他组件\n * @param config.enable - true | 只有在enable的值为true时，该实例才算启用并被钩子接受, 通常为Modal等组件的toggle参数 * @return state - 同类型启用组件共享的状态\n * @param config.updateDisabled - false | 发生变更时, 是否通知enable为false的组件更新\n * @return state[0] index - 该组件实例处于所有实例中的第几位，未启用的组件返回-1\n * @return state[1] instances - 所有启用状态的组件<Item>组成的数组，正序\n * @return state[2] id - 该组件实例的唯一标识\n * */\nexport function useSame<Meta = any>(\n  key: string,\n  config?: {\n    meta?: Meta;\n    deps?: any[];\n    enable?: boolean;\n    updateDisabled?: boolean;\n  }\n): Returns<Meta> {\n  const conf = {\n    ...defaultConfig,\n    ...config,\n  };\n\n  const id = useMemo(() => createRandString(2), []);\n  const sort = useMemo(() => ++increment, []);\n  /** 最后一次返回的信息, 用于对比验证是否需要更新 */\n  const lastReturn = useRef<Returns<Meta> | undefined>();\n\n  /* 在某个组件更新了sameMap后，需要通知其他相应的以最新状态更新组件 */\n  const update = useUpdate(true);\n  const { emit, useEvent } = useMemo(\n    () => getEvent(`${key}_same_custom_event`),\n    []\n  );\n\n  useMemo(() => {\n    // 创建item\n    const item: SameItem = {\n      id,\n      sort,\n      meta: conf.meta || {},\n      enable: conf.enable,\n    };\n\n    const [current] = getCurrent();\n\n    current.push(item);\n\n    current.sort((a, b) => a.sort - b.sort);\n  }, []);\n\n  // 将最新状态实时设置到当前的item上\n  useMemo(() => {\n    setCurrentState(conf.enable, conf.meta);\n  }, [conf.meta, conf.enable]);\n\n  // cIndex变更时，通知其他钩子进行更新\n  useUpdateEffect(() => emit(id, true), [...conf.deps]);\n\n  // enable变更时通知更新\n  useEffect(() => {\n    if (conf.enable) emit(id);\n\n    return () => {\n      const [, index] = getCurrent();\n      index !== -1 && emit(id);\n    };\n  }, [conf.enable]);\n\n  // unmount时通知其他组件并移除当前项\n  useEffect(() => {\n    return () => {\n      // 卸载时移除item\n      const [cur, index] = getCurrent();\n      if (index !== -1) {\n        const item = cur[index];\n        cur.splice(index, 1);\n        item.enable && emit(id);\n      }\n    };\n  }, []);\n\n  /** 获取过滤掉非enable项的所有item, 当前index和id */\n  function get() {\n    const [current] = getCurrent();\n\n    const filter = current.filter((item) => item.enable);\n    const index = filter.findIndex((item) => item.id === id);\n\n    return [index, filter, id] as const;\n  }\n\n  /** 获取当前组件在sameMap中的实例组和该组件在实例中的索引并确保sameMap[key]存在 */\n  function getCurrent() {\n    // 无实例存在时赋初始值\n    if (!isArray(sameMap[key])) {\n      sameMap[key] = [];\n    }\n\n    const index = sameMap[key].findIndex((item) => item.id === id);\n\n    return [sameMap[key], index] as const;\n  }\n\n  /** 接收组件更新通知 */\n  useEvent((_id: string, force?: boolean) => {\n    // 触发更新的实例不更新\n    if (_id === id) return;\n\n    if (!conf.updateDisabled && !conf.enable) return;\n\n    // 强制更新, 不添加额外条件, 主要目的是同步meta\n    if (force) {\n      update();\n      return;\n    }\n\n    if (!lastReturn.current) return;\n\n    const [index, current] = get();\n    const [lastIndex, lastCurrent] = lastReturn.current;\n\n    if (index !== lastIndex || current.length !== lastCurrent.length) {\n      update();\n    }\n  });\n\n  /* 设置当前实例的状态 */\n  function setCurrentState(_enable: boolean, _meta?: Meta) {\n    const [current, index] = getCurrent();\n\n    if (index !== -1) {\n      current[index].enable = _enable;\n      current[index].meta = _meta;\n    }\n  }\n\n  const returns = get();\n\n  lastReturn.current = [\n    returns[0],\n    [...returns[1]] /* 需要存储拷贝 */,\n    returns[2],\n  ];\n\n  return returns;\n}\n"],"names":["useEffect","useMemo","useRef","createRandString","isArray","createEvent","useUpdateEffect","useUpdate","sameMap","events","defaultConfig","deps","enable","updateDisabled","increment","getEvent","key","e","useSame","config","get","getCurrent","current","filter","item","index","findIndex","id","setCurrentState","_enable","_meta","meta","conf","sort","lastReturn","update","emit","useEvent","push","a","b","cur","splice","_id","force","lastIndex","lastCurrent","length","returns"],"mappings":"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"}