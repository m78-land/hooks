{"version":3,"sources":["/Users/lixianjie/project/openSource/hooks/src/state/useDerivedStateFromProps/useDerivedStateFromProps.ts"],"sourcesContent":["import { useState } from \"react\";\nimport { useUpdateEffect } from \"@m78/hooks\";\nimport _isEqualWith from \"lodash/isEqualWith\";\nimport { IsEqualCustomizer } from \"lodash\";\n\n/**\n *  实现类似getDerivedStateFromProps的效果，接收prop并将其同步为内部状态，\n *  当prop改变, 对prop和内部state执行_.isEqual,对比结果为false时，会更新内部值 (基础类型使用 === 进行对比，性能更高，当必须使用引用类型时，尽量保持结构简单，减少对比次数)\n *  @param prop - 需要派生为state的prop\n *  @param customizer - 可以通过此函数自定义对比方式, 如果相等返回 true，否则返回 false, 返回undefined时使用默认对比方式\n * */\nexport function useDerivedStateFromProps<T>(\n  prop: T,\n  customizer?: IsEqualCustomizer\n) {\n  const [state, setState] = useState<T>(prop);\n\n  useUpdateEffect(() => {\n    const isEqual = _isEqualWith(prop, state, customizer);\n    if (!isEqual) {\n      setState(prop);\n    }\n  }, [prop]);\n\n  return [state, setState] as const;\n}\n"],"names":["useState","useUpdateEffect","_isEqualWith","useDerivedStateFromProps","prop","customizer","state","setState","isEqual"],"mappings":"AAAA;AAAA,SAASA,QAAQ,QAAQ,OAAO,CAAC;AACjC,SAASC,eAAe,QAAQ,YAAY,CAAC;AAC7C,OAAOC,YAAY,MAAM,oBAAoB,CAAC;AAG9C;;;;;GAKG,GACH,OAAO,SAASC,wBAAwB,CACtCC,IAAO,EACPC,UAA8B,EAC9B;IACA,IAA0BL,GAAiB,oBAAjBA,QAAQ,CAAII,IAAI,CAAC,IAAA,EAApCE,KAAK,GAAcN,GAAiB,GAA/B,EAAEO,QAAQ,GAAIP,GAAiB,GAArB,AAAsB;IAE5CC,eAAe,CAAC,WAAM;QACpB,IAAMO,OAAO,GAAGN,YAAY,CAACE,IAAI,EAAEE,KAAK,EAAED,UAAU,CAAC,AAAC;QACtD,IAAI,CAACG,OAAO,EAAE;YACZD,QAAQ,CAACH,IAAI,CAAC,CAAC;QACjB,CAAC;IACH,CAAC,EAAE;QAACA,IAAI;KAAC,CAAC,CAAC;IAEX,OAAO;QAACE,KAAK;QAAEC,QAAQ;KAAC,CAAU;AACpC,CAAC"}